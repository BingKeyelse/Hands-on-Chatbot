import streamlit as st  # Th∆∞ vi·ªán t·∫°o giao di·ªán web
import time
from langchain.memory import StreamlitChatMessageHistory  # L∆∞u l·ªãch s·ª≠ chat
import os
from seed_data import seed_milvus_local

# === THI·∫æT L·∫¨P GIAO DI·ªÜN TRANG WEB ===
def setup_page():
    """
    C·∫•u h√¨nh trang web c∆° b·∫£n
    """
    st.set_page_config(
        page_title="AI Assistant",  # Ti√™u ƒë·ªÅ tab tr√¨nh duy·ªát
        page_icon="üí¨",  # Icon tab
        layout="wide"  # Giao di·ªán r·ªông
    )

# === KH·ªûI T·∫†O ·ª®NG D·ª§NG ===
def initialize_app():
    """
    Kh·ªüi t·∫°o c√°c c√†i ƒë·∫∑t c·∫ßn thi·∫øt:
    - ƒê·ªçc file .env ch·ª©a API key
    - C·∫•u h√¨nh trang web
    """
    setup_page()  # Thi·∫øt l·∫≠p giao di·ªán

# === THANH C√îNG C·ª§ B√äN TR√ÅI ===
def setup_sidebar():
    """
    T·∫°o thanh c√¥ng c·ª• b√™n tr√°i v·ªõi c√°c t√πy ch·ªçn:
    1. Ch·ªçn ngu·ªìn d·ªØ li·ªáu (File ho·∫∑c URL)
    2. Nh·∫≠p th√¥ng tin file/URL
    3. N√∫t t·∫£i/crawl d·ªØ li·ªáu
    """
    with st.sidebar:
        st.title("‚öôÔ∏è C·∫•u h√¨nh")

        # Ch·ªçn ngu·ªìn d·ªØ li·ªáu
        data_source = st.radio(
            "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
            ["File Local", "URL tr·ª±c ti·∫øp"]
        )
        
        # X·ª≠ l√Ω t√πy theo l·ª±a ch·ªçn
        if data_source == "File Local":
            handle_local_file()
        else:
            handle_url_input()


def handle_local_file():
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn t·∫£i file:
    1. Nh·∫≠p t√™n file v√† th∆∞ m·ª•c
    2. T·∫£i d·ªØ li·ªáu khi nh·∫•n n√∫t
    """
    # Upload file
    st.info("üí° H√£y ch·ªçn file (PDF, TXT, DOCX, CSV, MD) ƒë·ªÉ upload.")

    uploaded_files = st.file_uploader("Ch·ªçn file ƒë·ªÉ upload", 
                                        accept_multiple_files=True,
                                        type=["pdf", "txt", "docx", "csv", "md"]
                                        )

    if uploaded_files:
        data=[]
        for uploaded_file in uploaded_files:
            save_path = os.path.join('Data_restore', uploaded_file.name)
            data.append(uploaded_file.name)

            # Ghi d·ªØ li·ªáu ra file
            with open(save_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

        if st.button("Handle data"):
            with st.spinner("Handling..."):
                seed_milvus_local('http://localhost:19530','database', data, 'Data_restore')
            st.success("Done!")

def handle_url_input():
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn crawl URL:
    1. Nh·∫≠p URL c·∫ßn crawl
    2. B·∫Øt ƒë·∫ßu crawl khi nh·∫•n n√∫t
    """
    url = st.text_input("Nh·∫≠p URL:", "https://www.stack-ai.com/docs")
    if st.button("Crawl d·ªØ li·ªáu"):
        with st.spinner("ƒêang crawl d·ªØ li·ªáu..."):
            pass
            # seed_milvus_live(url, 'http://localhost:19530', 'data_test_live_v2', 'stack-ai')
        st.success("ƒê√£ crawl d·ªØ li·ªáu th√†nh c√¥ng!")

# === GIAO DI·ªÜN CHAT CH√çNH ===
def setup_chat_interface():
    """
    T·∫°o giao di·ªán chat ch√≠nh:
    1. Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    2. Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
    3. Hi·ªÉn th·ªã c√°c tin nh·∫Øn
    """
    st.title("üí¨ AI Assistant")
    st.caption("üöÄ Tr·ª£ l√Ω AI ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi LangChain v√† OpenAI")

    # Kh·ªüi t·∫°o b·ªô nh·ªõ chat
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    
    # T·∫°o tin nh·∫Øn ch√†o m·ª´ng n·∫øu l√† chat m·ªõi
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]
        msgs.add_ai_message("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])

    return msgs

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
def handle_user_input(msgs):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn:
    1. Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    2. G·ªçi AI x·ª≠ l√Ω v√† tr·∫£ l·ªùi
    3. L∆∞u v√†o l·ªãch s·ª≠ chat
    """
    if prompt := st.chat_input("H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ Stack AI!"):
        # L∆∞u v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "human", "content": prompt})
        st.chat_message("human").write(prompt) # cho vai tr√≤ v√† prompt m√¨nh nh·∫≠p
        msgs.add_user_message(prompt)

# === H√ÄM CH√çNH ===
def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh:
    1. Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    2. T·∫°o giao di·ªán
    3. X·ª≠ l√Ω t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    """
    initialize_app()
    setup_sidebar()
    # msgs = setup_chat_interface()

    # # X·ª≠ l√Ω chat
    # handle_user_input(msgs)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main() 
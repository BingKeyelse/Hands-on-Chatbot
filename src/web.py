import streamlit as st  # Th∆∞ vi·ªán t·∫°o giao di·ªán web
import time
# from langchain.memory import StreamlitChatMessageHistory  # L∆∞u l·ªãch s·ª≠ chat
from langchain_community.chat_message_histories import StreamlitChatMessageHistory # L∆∞u l·ªãch s·ª≠ chat
import os
# from langchain.callbacks import StreamlitCallbackHandler  # Hi·ªÉn th·ªã k·∫øt qu·∫£ realtime
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler # Hi·ªÉn th·ªã k·∫øt qu·∫£ realtime

from seed_data import seed_milvus_local, seed_milvus_live
from agent import get_retriever, get_llm_and_agent, get_local_llm  # Kh·ªüi t·∫°o AI

# streamlit run web.py
# streamlit run web.py --server.address 0.0.0.0 --server.port 8501



# === THI·∫æT L·∫¨P GIAO DI·ªÜN TRANG WEB ===
def setup_page():
    """
    C·∫•u h√¨nh trang web c∆° b·∫£n
    """
    st.set_page_config(
        page_title="AI Assistant",  # Ti√™u ƒë·ªÅ tab tr√¨nh duy·ªát
        page_icon="üí¨",  # Icon tab
        layout="wide"  # Giao di·ªán r·ªông
    )

# === KH·ªûI T·∫†O ·ª®NG D·ª§NG ===
def initialize_app():
    """
    Kh·ªüi t·∫°o c√°c c√†i ƒë·∫∑t c·∫ßn thi·∫øt:
    - ƒê·ªçc file .env ch·ª©a API key
    - C·∫•u h√¨nh trang web
    """
    setup_page()  # Thi·∫øt l·∫≠p giao di·ªán

# === THANH C√îNG C·ª§ B√äN TR√ÅI ===
def setup_sidebar():
    """
    T·∫°o thanh c√¥ng c·ª• b√™n tr√°i v·ªõi c√°c t√πy ch·ªçn:
    1. Ch·ªçn ngu·ªìn d·ªØ li·ªáu (File ho·∫∑c URL)
    2. Nh·∫≠p th√¥ng tin file/URL
    3. N√∫t t·∫£i/crawl d·ªØ li·ªáu
    """
    with st.sidebar:
        st.title("‚öôÔ∏è C·∫•u h√¨nh")

        # Ch·ªçn ngu·ªìn d·ªØ li·ªáu
        data_source = st.radio(
            "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
            ["File Local", "URL tr·ª±c ti·∫øp"]
        )
        
        # X·ª≠ l√Ω t√πy theo l·ª±a ch·ªçn
        if data_source == "File Local":
            handle_local_file()
        else:
            handle_url_input()


def handle_local_file():
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn t·∫£i file:
    1. Nh·∫≠p t√™n file v√† th∆∞ m·ª•c
    2. T·∫£i d·ªØ li·ªáu khi nh·∫•n n√∫t
    """
    # Upload file
    st.info("üí° H√£y ch·ªçn file (PDF, TXT, DOCX, CSV, MD) ƒë·ªÉ upload.")

    uploaded_files = st.file_uploader("Ch·ªçn file ƒë·ªÉ upload", 
                                        accept_multiple_files=True,
                                        type=["pdf", "txt", "docx", "csv", "md"]
                                        )
    if uploaded_files:
        data=[]
        for uploaded_file in uploaded_files:
            save_path = os.path.join('Data_restore', uploaded_file.name)
            data.append(uploaded_file.name)

            # Write file into folder Data_restore to read after
            with open(save_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

        if st.button("Handle data"):
            with st.spinner("Handling..."):
                seed_milvus_local('http://localhost:19530','database', data, 'Data_restore')
            st.success("Done!")

def handle_url_input():
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn crawl URL:
    1. Nh·∫≠p URL c·∫ßn crawl
    2. B·∫Øt ƒë·∫ßu crawl khi nh·∫•n n√∫t
    """
    url = st.text_input("Nh·∫≠p URL:", "https://www.stack-ai.com/docs")
    if st.button("Crawl d·ªØ li·ªáu"):
        with st.spinner("ƒêang crawl d·ªØ li·ªáu..."):
            seed_milvus_live(url, 'http://localhost:19530', 'database')
        st.success("ƒê√£ crawl d·ªØ li·ªáu th√†nh c√¥ng!")

# === GIAO DI·ªÜN CHAT CH√çNH ===
def setup_chat_interface():
    """
    T·∫°o giao di·ªán chat ch√≠nh:
    1. Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    2. Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
    3. Hi·ªÉn th·ªã c√°c tin nh·∫Øn
    """
    st.title("üí¨ AI Assistant")
    st.caption("üöÄ Tr·ª£ l√Ω AI ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi LangChain v√† OpenAI")

    # Kh·ªüi t·∫°o b·ªô nh·ªõ chat
    msgs = StreamlitChatMessageHistory(key="chat_messages")
    
    # B∆Ø·ªöC 1: KH·ªûI T·∫†O st.session_state.messages N·∫æU CH∆ØA T·ªíN T·∫†I
    if "messages" not in st.session_state:
        st.session_state.messages = [] # Kh·ªüi t·∫°o danh s√°ch r·ªóng

    # B∆Ø·ªöC 2: KH·ªûI T·∫†O StreamlitChatMessageHistory (s·∫Ω li√™n k·∫øt v·ªõi st.session_state.messages)
    msgs = StreamlitChatMessageHistory(key="chat_messages") 
    
    # B∆Ø·ªöC 3: ƒê·ªíNG B·ªò TIN NH·∫ÆN CH√ÄO M·ª™NG (N·∫øu l·ªãch s·ª≠ chat ho√†n to√†n tr·ªëng)
    if len(st.session_state.messages) == 0:
        greeting = "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
        st.session_state.messages.append({"role": "assistant", "content": greeting})
        # Quan tr·ªçng: Add v√†o msgs ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi LangChain/Agent Executor
        msgs.add_ai_message(greeting) 

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])

    return msgs

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
# H√ÄM CH·ªà NH·∫¨N agent_executor
def handle_user_input(agent_executor): 
    
    if prompt := st.chat_input("H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ Stack AI!"):
        # L∆∞u v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "human", "content": prompt})
        st.chat_message("human").write(prompt)
        # ‚ùå ƒê·∫£m b·∫£o b·∫°n ƒë√£ X√ìA D√íNG N√ÄY: msgs.add_user_message(prompt)

        # X·ª≠ l√Ω v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        with st.chat_message("assistant"):
            st_callback = StreamlitCallbackHandler(st.empty()) 
            
            # G·ªåI AI CH·ªà V·ªöI INPUT
            response = agent_executor.invoke(
                {"input": prompt}, # <-- PH·∫¢I CH·ªà C√ì INPUT!
                {"callbacks": [st_callback]}
            )

            # L∆∞u v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            output = response["output"]
            st.session_state.messages.append({"role": "assistant", "content": output})
            # ‚ùå ƒê·∫£m b·∫£o b·∫°n ƒë√£ X√ìA D√íNG N√ÄY: msgs.add_ai_message(output)
            st.write(output)

# === H√ÄM CH√çNH ===
def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh:
    1. Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    2. T·∫°o giao di·ªán
    3. X·ª≠ l√Ω t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    """
    initialize_app()
    setup_sidebar()
    
    # üí° S·ª¨A: CH·ªà G·ªåI setup_chat_interface(), KH√îNG G√ÅN V√Ä S·ª¨ D·ª§NG MSGS N·ªÆA
    setup_chat_interface() 

    retriever = get_retriever()
    llm_instance = get_local_llm()
    # Agent Executor ƒë√£ c√≥ Memory ri√™ng (ConversationBufferMemory)
    agent_executor = get_llm_and_agent(retriever, llm_instance) 

    # üí° S·ª¨A: CH·ªà G·ªåI H√ÄM V·ªöI agent_executor
    handle_user_input(agent_executor) 

def test_retriever_query(query: str):
    """
    H√†m test truy v·∫•n tr·ª±c ti·∫øp Retriever
    """
    print(f"\n--- üîé ƒêANG TRUY V·∫§N: '{query}' ---")
    
    try:
        # L·∫•y retriever ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh (EnsembleRetriever)
        retriever = get_retriever()
        
        # ‚ö†Ô∏è S·ª¨ D·ª§NG PH∆Ø∆†NG TH·ª®C invoke()
        # ƒê·ªëi v·ªõi LangChain v0.2, invoke() l√† c√°ch ƒë∆∞·ª£c khuy·∫øn ngh·ªã
        results = retriever.invoke(query)
        
        # In k·∫øt qu·∫£
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(results)} t√†i li·ªáu:")
        for i, doc in enumerate(results):
            # In n·ªôi dung ng·∫Øn g·ªçn v√† ngu·ªìn
            content_snippet = doc.page_content[:200] + "..."
            source = doc.metadata.get('source', 'N/A')
            print(f"--- Document {i+1} ---")
            print(f"Ngu·ªìn: {source}")
            # print(f"N·ªôi dung: {content_snippet}")
            print("-" * 15)

    except Exception as e:
        print(f"‚ùå L·ªói x·∫£y ra khi truy v·∫•n Retriever: {e}")
        print("Vui l√≤ng ƒë·∫£m b·∫£o Milvus server ƒëang ch·∫°y t·∫°i localhost:19530")

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    # main() 
    # B·∫°n n√™n comment out (ho·∫∑c x√≥a) main() n·∫øu kh√¥ng mu·ªën Streamlit ch·∫°y
    # main() 
    
    # --- B·∫ÆT ƒê·∫¶U KI·ªÇM TRA ---
    
    # 1. Truy v·∫•n b·∫±ng ti·∫øng Vi·ªát v·ªÅ ch·ªß ƒë·ªÅ ƒë√£ c√≥ trong d·ªØ li·ªáu
    test_retriever_query("Cach su dung UV")
    
    # 2. Truy v·∫•n kh√°c
    # test_retriever_query("C√°c b∆∞·ªõc ƒë·ªÉ k·∫øt n·ªëi t·ªõi Milvus l√† g√¨?")
    
    # 3. Truy v·∫•n v·ªÅ c√¥ng ngh·ªá
    # test_retriever_query("LangChain l√† g√¨?")